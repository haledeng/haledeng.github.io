<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A Field of haledeng</title>
    <description>Action speaks louder than words.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 31 Aug 2016 09:24:25 +0800</pubDate>
    <lastBuildDate>Wed, 31 Aug 2016 09:24:25 +0800</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>gulp-replace-file</title>
        <description>&lt;h1 id=&quot;gulp-replace-file&quot;&gt;gulp-replace-file&lt;/h1&gt;
&lt;p&gt;A gulp plugin to parse reference files in JS files. Different files will be parsed into different contents.
+ Template files (with a file extension name &lt;code class=&quot;highlighter-rouge&quot;&gt;.html&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.tpl&lt;/code&gt;) =&amp;gt; JS functions.
+ Css files =&amp;gt; string.
+ Other files =&amp;gt; its file content.&lt;/p&gt;

&lt;h3 id=&quot;install&quot;&gt;Install&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i gulp-replace-file
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// __inline is the key function to reference file, which can be configed in gulpfile.
var htmlFunc = __inline(&#39;./temp.html&#39;);
var htmlStr = htmlFunc(data);
var cssText = __inline(&#39;./test.css&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;config-in-gulpfile&quot;&gt;Config in gulpfile&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var replace = require(&#39;gulp-replace-file&#39;);
gulp.task(&#39;replace&#39;, function() {
	gulp.src(&#39;replace/test.js&#39;)
		.pipe(replace())
		.pipe(gulp.dest(&#39;./build/&#39;))
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;config-option&quot;&gt;config option&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;prefix&lt;/strong&gt; : The key value to reference file. &lt;code class=&quot;highlighter-rouge&quot;&gt;__inline&lt;/code&gt; is a default value.&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2016/08/25/gulp-replace-file.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/08/25/gulp-replace-file.html</guid>
        
        
      </item>
    
      <item>
        <title>shelljs构建库</title>
        <description>&lt;p&gt;单个lib的构建，使用gulp、grunt等构建工具，总感觉有点大材小用，需要安装一堆依赖不说，而且配置比较复杂。shelljs是一个轻量级的文件I/O库，可以做为简单的构建工具。&lt;/p&gt;

&lt;h3 id=&quot;shelljs&quot;&gt;什么是shelljs&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;shelljs是node版的shell命令&lt;/strong&gt;。 通过node API，实现了Unix下shell命令。&lt;/p&gt;

&lt;h3 id=&quot;nodemakefile&quot;&gt;node版Makefile&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shelljs/make&lt;/code&gt;和unix下makefile的行为是一致的。脚本中包含一个全局的对象&lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt;。taget对象下面挂载了N个方法，有N中不同的行为。执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;node 文件名 方法名&lt;/code&gt;就是执行对应的方法。比如，有下面的make文件，执行&lt;code class=&quot;highlighter-rouge&quot;&gt;node make dist&lt;/code&gt;时，会执行&lt;code class=&quot;highlighter-rouge&quot;&gt;target.dist&lt;/code&gt;方法中定义的行为。若没有执行方法名，会执行&lt;code class=&quot;highlighter-rouge&quot;&gt;all&lt;/code&gt;方法。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require(&#39;shelljs/make&#39;);
target.all = function() {
};

target.dist = function() {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section&quot;&gt;如何构建&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;所谓构建，其实是文件I /O操作&lt;/strong&gt;。shell命令中有很多关于文件读写的命令，比如cat，cp等等。使用这些基础的命令可以做一些简单的文件合并，拷贝等操作。能力不足的，可以用npm包来不全。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;适用范围&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;shelljs的能力比较有限，适用于单个库的构建&lt;/strong&gt;。比如zepto、Firebug等。单个项目的构建，建议还是使用gulp、fis等。&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2016/07/04/shelljs.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/07/04/shelljs.html</guid>
        
        
      </item>
    
      <item>
        <title>react 入门</title>
        <description>&lt;h3 id=&quot;react-&quot;&gt;react 是什么&lt;/h3&gt;
&lt;p&gt;要说现在最火的框架，非 react 莫属。
react 是一个用户构建用户界面的 JS 库。官方的定义中，有下面3个核心点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;仅仅是MVC中的V，更关注渲染。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;虚拟 DOM。在内层中构建 DOM 对应的树状机构，view 变化时，对比和上一个树的差异，计算最小渲染 。同时支持 node 服务端渲染。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数据流。这个更多的是 flux 和 redux 干的事情。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;react&quot;&gt;如何使用react&lt;/h3&gt;
&lt;p&gt;使用 react，需要引用 react.js、react-dom.js。如果代码中涉及到 JSX 语法，还需要引用 browser.js 。大体的结构：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script src=&quot;../../build/react.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;../../build/react-dom.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;../../build/browser.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/babel&quot;&amp;gt;
// JSX
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;其中，react 是 react 核心库，react-dom 封装了 dom 相关操作，browser 负责解析 JSX 语法。生产环境中，请用编译后的 JSX，因为：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;browser 很大，压缩后有 1.29 MB&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编译很耗时。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;reactdomrender&quot;&gt;ReactDOM.render&lt;/h4&gt;
&lt;p&gt;ReactDOM.render 将 react 组件渲染到 dom 上。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script type=&quot;text/babel&quot;&amp;gt;
ReactDom.reander(
	&amp;lt;p&amp;gt;hello world&amp;lt;/p&amp;gt;,
	document.getElementById(&#39;container&#39;)
)
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;也可以用非 JSX 的方法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;
ReactDom.reander(
	React.createElement(&#39;p&#39;, null, &#39;hello world&#39;),
	document.getElementById(&#39;container&#39;)
)
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;thisprops&quot;&gt;this.props&lt;/h4&gt;
&lt;p&gt;props 类似与 HTML 元素的 attribute，挂在标签元素上，具体的语法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;标签 属性名=&quot;属性值&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;在 React 中，标签是 React Component，属性名是 prop，在组件内部，可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;this.props.属性名&lt;/code&gt;访问外部传递给组件的参数。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script type=&quot;text/babel&quot;&amp;gt;
var Hello = React.createClass({
    render: function() {
        return (
            &amp;lt;h1&amp;gt;{this.props.text}&amp;lt;/h1&amp;gt;
        )
    }
});

ReactDOM.render(
	&amp;lt;Hello text=&quot;hello world&quot; /&amp;gt;,
	document.getElementById(&#39;container&#39;)
)
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;props的主要作用是：&lt;code class=&quot;highlighter-rouge&quot;&gt;**接收组件外部传递给组件的参数，用于父、子组件间的数据流传递**&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;thisstate&quot;&gt;this.state&lt;/h4&gt;
&lt;p&gt;state 可以理解为类的实例属性。&lt;code class=&quot;highlighter-rouge&quot;&gt;**用于组件内部不用方法间的数据传递**&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var Real = React.createClass({
	getInitialState: function() {
		return {
			value: &#39;hello world&#39;
		}
	},
	render: function() {
		return (
			&amp;lt;div&amp;gt;
				&amp;lt;p&amp;gt;{this.state.value}&amp;lt;/p&amp;gt;	
				&amp;lt;input type=&quot;text&quot; value={this.state.value} onChange={this._onChange}/&amp;gt;
			&amp;lt;/div&amp;gt;
		)
	},
	_onChange: function(e) {
		this.setState({
			value: e.target.value
		});
	}
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;thisrefs&quot;&gt;this.refs&lt;/h4&gt;
&lt;p&gt;refs 主要用于 &lt;strong&gt;react 访问 DOM 层的 API&lt;/strong&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var Ref = React.createClass({
    render: function() {
        return (
            &amp;lt;div&amp;gt;
                &amp;lt;input type=&quot;button&quot; value=&quot;click me&quot;
                onClick={this._btnClick} /&amp;gt;
                &amp;lt;input type=&quot;text&quot;
                   ref=&#39;myInput&#39; /&amp;gt;
            &amp;lt;/div&amp;gt;
        )
    },
    _btnClick: function (e) {
        this.refs.myInput.focus();
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;jsx--babel&quot;&gt;JSX &amp;amp; babel&lt;/h3&gt;
&lt;p&gt;前面提到线下编译 JSX，babel 可以完成这项苦差，安装 babel：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i -g babel-cli
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Babel 6 默认没有带转化器，需要手动安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;es2015&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;react&lt;/code&gt; 插件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i babel-preset-es2015 babel-preset-react
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;执行 babel 指令，可以将 jsx 转换成 js（自带 watch 功能）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;babel --presets es2015,react --watch src/ --out-dir lib/

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以对比一下转化前后的代码段：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// JSX
var React = require(&#39;react&#39;);

var Hello = React.createClass({
    render: function() {
        return (
            &amp;lt;p&amp;gt;hello world&amp;lt;/p&amp;gt;
        )
    }
});

module.exports = Hello;


// 转化后

&#39;use strict&#39;;
var React = require(&#39;react&#39;);

var Hello = React.createClass({
    displayName: &#39;Hello&#39;,

    render: function render() {
        return React.createElement(
            &#39;p&#39;,
            null,
            &#39;hello world&#39;
        );
    }
});

module.exports = Hello;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;babel 主要把 JSX 语法转化成了&lt;code class=&quot;highlighter-rouge&quot;&gt;React.createElement&lt;/code&gt;。&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2016/04/07/React.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/04/07/React.html</guid>
        
        
      </item>
    
      <item>
        <title>npm scripts</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm scripts&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;中的一个配置属性。做单元测试时，常常会用到&lt;code class=&quot;highlighter-rouge&quot;&gt;npm test&lt;/code&gt;，其实&lt;code class=&quot;highlighter-rouge&quot;&gt;npm scripts&lt;/code&gt;能做的更多。&lt;/p&gt;

&lt;p&gt;最近社区有开发者提到，用&lt;code class=&quot;highlighter-rouge&quot;&gt;npm scripts&lt;/code&gt;替换现有的构建工具：grunt、gulp等，由此可见&lt;code class=&quot;highlighter-rouge&quot;&gt;npm scripts&lt;/code&gt;是一个强大的工具。&lt;/p&gt;

&lt;h3 id=&quot;npm-scripts&quot;&gt;什么是 npm scripts&lt;/h3&gt;
&lt;p&gt;先来看一个简单的&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;(截取了&lt;code class=&quot;highlighter-rouge&quot;&gt;node-sass&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;中的部分属性)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node-sass&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3.5.0-beta.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;coverage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node scripts/coverage.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;install&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node script/install.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;postinstall&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node scripts/build.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pretest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node_modules/.bin/jshint bin lib scripts test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node_modules/.bin/mocha test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node scripts/build.js --force&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;prepublish&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;not-in-install &amp;amp;&amp;amp; node scripts/prepublish.js || in-install&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; 会有一些默认的命令，包括但不限于：publish、test、install等。
执行这些命令时，实际执行的是&lt;code class=&quot;highlighter-rouge&quot;&gt;scripts&lt;/code&gt;中对应属性的脚本。比如，npm install 时，会执行&lt;code class=&quot;highlighter-rouge&quot;&gt;node script/install.js&lt;/code&gt;。同时提供了相对应的勾子：&lt;code class=&quot;highlighter-rouge&quot;&gt;pre&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;preinstall&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;postinstall&lt;/code&gt; 会相应的在 install 前后执行。&lt;/p&gt;

&lt;h3 id=&quot;npm-scripts-&quot;&gt;npm scripts 能干些什么&lt;/h3&gt;
&lt;p&gt;了解什么是&lt;code class=&quot;highlighter-rouge&quot;&gt;npm scripts&lt;/code&gt;后，它能做的事情就很明确了：&lt;code class=&quot;highlighter-rouge&quot;&gt;在scripts中定义命令（执行一个node脚本，或者有全局的node包去跑一些命令），然后用npm的命令行执行对应的命令&lt;/code&gt;。默认的一些指令的作用已经很明确了，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;npm test&lt;/code&gt;会执行&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;对应的脚本等。那么如何自定义脚本呢？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;scripts&quot;: {
	&quot;dev&quot;: &quot;node-sass src/style.scss dest/style.css&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的 demo 中定义了一个 dev 脚本，运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run dev&lt;/code&gt; 即可执行对应的命令。&lt;/p&gt;

&lt;h3 id=&quot;npm-script-&quot;&gt;npm script 替代构建&lt;/h3&gt;
&lt;p&gt;现有的构建体系依赖的插件体系，都是用构建体系本身去封装第3方库，不可避免的会存在以下问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;第3方库更新了，插件没有更新。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;报错了，是第3方库的问题还是插件的问题？&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;文档，文档，文档。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;……&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm scripts&lt;/code&gt; 至少可以避免1，2，3。使用者只需要关注于第3方库如何使用，无须关心对应的插件用法。同时，不用构建体系之间的移植也更加方便。&lt;/p&gt;

&lt;p&gt;当然，&lt;code class=&quot;highlighter-rouge&quot;&gt;npm scripts&lt;/code&gt;使用本身也有些问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;某个功能如果没有对应的第3方库，编写插件比较麻烦。构建体系本身会提供一些api，编写插件时，可以复用这些api，但是用&lt;code class=&quot;highlighter-rouge&quot;&gt;npm scripts&lt;/code&gt;时，实际上是编写 node 插件，api的级别更低。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;跨平台。 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm scripts&lt;/code&gt;可以基于管道的方式（一个task的输出，作为另一个task的输入），在windows下支持不友好。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section&quot;&gt;如何选择&lt;/h3&gt;
&lt;p&gt;说了这么多 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm scripts&lt;/code&gt;的好处，真的就要用它替代 grunt、gulp、fis吗？&lt;/p&gt;

</description>
        <pubDate>Mon, 04 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2016/04/04/npm-scripts.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/04/04/npm-scripts.html</guid>
        
        
      </item>
    
      <item>
        <title>从smart漫谈打包</title>
        <description>&lt;p&gt;项目构建迁移到fis体系后，打包的问题就跟着来了。打包的基本方式是：分析依赖，合并文件，解决引入。&lt;/p&gt;

&lt;h3 id=&quot;css&quot;&gt;CSS处理方式&lt;/h3&gt;

&lt;h4 id=&quot;section&quot;&gt;来源&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;link 引入&lt;/li&gt;
  &lt;li&gt;require 引入&lt;/li&gt;
  &lt;li&gt;其它模块的同名依赖&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-1&quot;&gt;提取来源&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;正则匹配link&lt;/li&gt;
  &lt;li&gt;require的方式可以直接通过 file.requires获取&lt;/li&gt;
  &lt;li&gt;处理方式略复杂，需要在分析js依赖时，判断依赖是css文件&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-2&quot;&gt;打包逻辑&lt;/h4&gt;

&lt;p&gt;最粗暴的方式是allInOne，全部打成一个包。但是多个页面的业务中，有重复的代码被打到了不同的文件中。这种情况下，打包成2个文件比较合适：&lt;strong&gt;一个基础样式，一个页面样式&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;common，reset等公共样式打包成一个文件，Page 级别的样式打包成一个文件&lt;/strong&gt;，common级的样式，每个页面都引入（加载可以利用缓存），页面级样式根据自身的依赖引入不同的文件。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;问题&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;哪些算是公共样式？
common文件夹下的所有样式文件？&lt;strong&gt;common打包必须要有通用性，确保能够覆盖到大部分（甚至全部）页面，同时又不会太冗余，给页面带来很多不必要的样式&lt;/strong&gt;，这里必须要有一些规则来约束。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;打包的灵活性？
有些业务（活动等）就是单页面应用，打2个文件的方案真的适用吗？甚至H5的单页应用，就是需要直接inline到页面。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-4&quot;&gt;一些尝试&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;定义一个common.scss之类的文件，import一些项目级的css文件，页面link这个公共的样式文件。打包处理时，将这个打成一个包，页面其他的css全部打成另一个包。&lt;/li&gt;
  &lt;li&gt;common文件夹下存放的就是项目级的css文件，每个Page只关注页面级的样式，打包自动将common下的css打包，接入引入问题。&lt;/li&gt;
  &lt;li&gt;灵活性可以通过配置的问题解决。&lt;/li&gt;
  &lt;li&gt;…….&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;js&quot;&gt;JS打包&lt;/h3&gt;

&lt;p&gt;JS打包方式多样性，fis 官方推荐的loader也没有很好的解决这个问题（PS：在入口函数的注释里写着：粗暴的打包方式）。&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;来源&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;script 标签引入&lt;/li&gt;
  &lt;li&gt;require&lt;/li&gt;
  &lt;li&gt;require.async&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-6&quot;&gt;依赖方式&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;同步&lt;/li&gt;
  &lt;li&gt;异步&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-7&quot;&gt;处理方式&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;同步直接script引入&lt;/li&gt;
  &lt;li&gt;异步通过resourceMap加载&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-8&quot;&gt;奇葩&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;同步里面的异步依赖&lt;/li&gt;
  &lt;li&gt;异步里面的同步、异步依赖&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上只是问题的一小部分，足见打包场景的复杂和多样性，但是这里还是抛砖引玉的做一些简单的分析。&lt;/p&gt;

&lt;h4 id=&quot;section-9&quot;&gt;提取来源&lt;/h4&gt;

&lt;p&gt;这里只提取require和require.async，不对script引入做任何处理。从loader的处理方式看，它对script的处理并不成功，需要添加各种ignore注释，偶尔会打乱script的顺序。&lt;/p&gt;

&lt;h4 id=&quot;section-10&quot;&gt;打包逻辑&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;分析每个文件id的依赖（深层分析，依赖的依赖）&lt;/li&gt;
  &lt;li&gt;依赖和当前文件打包&lt;/li&gt;
  &lt;li&gt;script 插入到html中  （同步）&lt;/li&gt;
  &lt;li&gt;生成resourceMap并插入到html中&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-11&quot;&gt;问题&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;异\同步文件的异步依赖如何处理？
文件的异步依赖，全部打包到一起，丢到resourceMap中。&lt;/li&gt;
  &lt;li&gt;公共库如何处理？
公共库单独打包，定义一个base之类的文件，将项目级的公共库引入，在html文件中require引入base，其他的文件的打包需要将这部分公共库排除掉。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-12&quot;&gt;其他问题&lt;/h3&gt;

&lt;p&gt;上面的逻辑也只是解决一些基础问题，鉴于&lt;strong&gt;项目的多样性、处理方式的多样性&lt;/strong&gt;，实际只处理了一小部分的问题，很多例外的情况没有处理到：
+ require 第3方库
+ require.async 第3方库
+ require(模块是变量)
+ vm编译（vm中if else可以是2个页面，打包如何处理）
+ ……&lt;/p&gt;

&lt;p&gt;fis 提供了packTo的打包方式，这个是最原始的，通过match正则打包成不同的文件，但是如何解决引入文件？打包的文件放到哪个html中？同步异步？&lt;/p&gt;

&lt;h3 id=&quot;section-13&quot;&gt;最后的最后&lt;/h3&gt;

&lt;p&gt;打包实际针对的是&lt;strong&gt;一种业务场景和目录结构的方案，只是对一些默认的规则集的实现&lt;/strong&gt;，像packTo这种方式，貌似能够解决所有的打包场景（业务自己去配置），但这种蛮荒时代的方式真的可用吗？野蛮生长，没有内在的规律约束。&lt;/p&gt;

&lt;p&gt;在打包之前，就应该&lt;strong&gt;规定业务场景和目录结构，定义使用范围和边界&lt;/strong&gt;，不可能有一种打包方案使用所有的场景。官方的loader只是一种单页应用的方案。&lt;/p&gt;

</description>
        <pubDate>Thu, 24 Mar 2016 03:21:03 +0800</pubDate>
        <link>http://yourdomain.com/fis/2016/03/24/smart-pack.html</link>
        <guid isPermaLink="true">http://yourdomain.com/fis/2016/03/24/smart-pack.html</guid>
        
        
        <category>fis</category>
        
      </item>
    
      <item>
        <title>meteor简介</title>
        <description>&lt;h3 id=&quot;what&quot;&gt;What&lt;/h3&gt;
&lt;p&gt;“Meteor gives you a radically simpler way to build realtime mobile and web apps, entirely in JavaScript from one code base.”&lt;/p&gt;

&lt;p&gt;简单来讲，Meteor基于Node来开发实时应用，复用前后端JS代码。&lt;/p&gt;

&lt;h3 id=&quot;why&quot;&gt;Why&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;从 client 到 server， 从 package 到 数据库 api，全部都是JS&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;跨端&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;实时渲染&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;安装&lt;/h3&gt;
&lt;p&gt;OS X or Linux 平台
&lt;code class=&quot;highlighter-rouge&quot;&gt;curl https://install.meteor.com/ | sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Windows 平台需要下载 exe 文件安装。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;使用&lt;/h3&gt;
&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;meteor create&lt;/code&gt; 新建项目，进入项目目录， 执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;meteor&lt;/code&gt; 命令，运行，即可在浏览器查看。
&lt;img src=&quot;https://cloud.githubusercontent.com/assets/3880323/11441060/3d13a72a-9543-11e5-91a7-04e4f5ee56b9.png&quot; alt=&quot;qq 20151127201245&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/3880323/11441097/99b48e22-9543-11e5-8b22-c2c00d9361aa.png&quot; alt=&quot;qq 20151127201508&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;应用文件结构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/3880323/11441141/0d1f0806-9544-11e5-88b4-b20b3aa0ac0b.png&quot; alt=&quot;qq 20151127201830&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;/server 文件夹中的代码只会在服务器端运行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 /client 文件夹中的代码只会在客户端运行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;其它代码则将同时运行于服务器端和客户端上。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;请将所有的静态文件（字体，图片等）放置在 /public 文件夹中。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;模版&lt;/h3&gt;
&lt;p&gt;client 目录下的 main.html 是主入口，页面的模版文件放在 templates 目录下，模板的引用语法``
表示引用 templates 目录下模版名为 ‘postList’ 的模版（这个和文件名没有关系），模版语法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template name=&quot;postsList&quot;&amp;gt;
  &amp;lt;div class=&quot;posts&quot;&amp;gt;
     
       
     
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;client 中文件的修改会触发网页reload刷新，类似livereload机制。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;数据库&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/3880323/11441232/2329edb8-9545-11e5-9328-47f3e0b6e73b.png&quot; alt=&quot;qq 20151127202621&quot; /&gt;&lt;/p&gt;

&lt;p&gt;启动应用是，会启动3个服务：proxy, mongoDB, http server.
这里已经启动了一个mongod的服务，可以执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;meteor mongo&lt;/code&gt;  进入mongo shell，然后敲各种熟悉的命令进行db操作。&lt;/p&gt;

&lt;p&gt;对db操作的REST接口，server 和 client 都可以用到，可以直接放到collections目录下。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Posts = new Mongo.Collection(&#39;posts&#39;);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;注意： 这里没有用var定义，所有Posts是一个全局变量，server 要使用Posts对象时，并不需要应用相应的文件，直接引用即可&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (Posts.find().count() === 0) {
  Posts.insert({
    title: &#39;Introducing Telescope&#39;,
    url: &#39;http://sachagreif.com/introducing-telescope/&#39;
  });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;客户端获取db的数据，也直接调用Posts的方法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Posts.find();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-5&quot;&gt;赠品&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;包管理，类似于npm机制，安装某个meteor包，只需要 &lt;code class=&quot;highlighter-rouge&quot;&gt;meteor add xxx&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;终端调试，可以用meteor指令将app安装到模拟器中运行&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;与angular和react无缝对接&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;终有一天，前端将抛弃CGI、后台，开发出一款属于自己的APP。&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Oct 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2015/10/07/meteor.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/10/07/meteor.html</guid>
        
        
      </item>
    
      <item>
        <title>如何编写fis3插件</title>
        <description>&lt;p&gt;目前业务正在逐步迁移到fis3和lego，有许多和业务相关的fis插件需要处理。&lt;/p&gt;

&lt;h3 id=&quot;fis-&quot;&gt;fis 编译流程&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/3880323/10098419/c00bd326-63b3-11e5-9c15-b9bbf3eb27a0.png&quot; alt=&quot;fis-compile-flow&quot; /&gt;
官方的这张图，对fis的构建流程讲述的很清楚了，主要包括单文件编译和打包，业务中的插件也主要是这两种，至于是pre还是post，差别不是特别大。主要记住一点区别：&lt;strong&gt;单文件编译阶段，无法获取文件之间的关联信息；打包阶段，能够拿到项目的所有文件&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;iconfont-&quot;&gt;iconfont 实例&lt;/h3&gt;

&lt;p&gt;本文以fis接入iconfont插件为例，讲述iconfont接入方案，iconfont大致的流程：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;同步svg，将项目用到的svg，通过&lt;a href=&quot;http://iconfont.imweb.io&quot;&gt;iconfont平台&lt;/a&gt;同步到项目目录&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编译svg，生成字体文件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;接入字体相关的css问题&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;html引入css文件&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;iconfont&quot;&gt;单文件编译处理iconfont&lt;/h3&gt;

&lt;p&gt;大体的逻辑是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;遍历项目目录下的所有svg，生成字体文件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;生成css&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;所有业务html引入css&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;配置：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    fis.match(&#39;/*.html&#39;, {
         preprocessor: fis.plugin(&#39;iconfont&#39;,  {
             svgPath: &#39;../svgs&#39;,
             output: &#39;modules/common/fonts&#39;
         })
    })
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;对根目录下的所有html应用组件，编译一次svg，生成字体文件，然后对业务html引入css文件。&lt;/p&gt;

&lt;h3 id=&quot;iconfont-1&quot;&gt;打包阶段处理iconfont&lt;/h3&gt;

&lt;p&gt;上面的处理方式很粗暴，svg并没有按需生成，更好的方式是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;获取项目中用到的icon&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查找对应的svg，生成字体文件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;字体css生成&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;html引入css&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其中，第1步，需要通过编译所有文件获取结果，所以必须要在打包截断处理。参考&lt;a href=&quot;https://github.com/haledeng/fis-postpackager-iconfont&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;单元测试&lt;/h3&gt;

&lt;p&gt;fis3一个很大的优势是提供了单元测试的接口，写完插件后，记得要用单元测试过下，同时这也是一个调试的过程（fis2的调试只能依赖具体的项目）,主体的代码架构是:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var fs = require(&#39;fs&#39;),
    path = require(&#39;path&#39;),
    fis = require(&#39;fis3&#39;),
    _ = fis.util,
    expect = require(&#39;chai&#39;).expect,
   // 下面这两个库是提供测试的关键库，用于release
    _release = fis.require(&#39;command-release/lib/release.js&#39;),
    _deploy = fis.require(&#39;command-release/lib/deploy.js&#39;),
   // 自己编写的插件入口文件
    iconfont = require(&#39;../src/&#39;);

function release(opts, cb) {
    opts = opts || {};
    _release(opts, function(error, info) {
        _deploy(info, cb);
    });
}
describe(&#39;fis-postpackager-iconfont&#39;, function() {
    var root = path.join(__dirname, &#39;src&#39;);

    fis.project.setProjectRoot(root);
    // 测试用例

    beforeEach(function() {
          // 这里写各种fis的配置
           fis .match(&#39;*&#39;, {
                deploy: iconfont({
                         // 自己插件的配置
                })
            });
    });

    it(&#39;test case&#39;, function() {

        release({
            unique: true
        }, function() {
            // 文件是否生成
            // release 之后，检测是否和预期一致
            console.log(&#39;release end&#39;);
        });
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;npm-publish&quot;&gt;npm publish&lt;/h3&gt;

&lt;p&gt;这个没啥好说的，注册帐号之后，直接在插件目录下 &lt;strong&gt;npm init&lt;/strong&gt;，按照格式填写package.json后，直接运行 &lt;strong&gt;npm publish&lt;/strong&gt;，将代码发布出去，这样方便其他人使用。&lt;/p&gt;

</description>
        <pubDate>Fri, 25 Sep 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/fis/2015/09/25/how-to-write-fis-plugin.html</link>
        <guid isPermaLink="true">http://yourdomain.com/fis/2015/09/25/how-to-write-fis-plugin.html</guid>
        
        
        <category>fis</category>
        
      </item>
    
  </channel>
</rss>
